#Object Oriented Programming의 약자로 객체 지향 프로그래밍을 의미

#객체 지향 프로그래밍이란?
- 현실 세계를 프로그래밍으로 옮겨와서 현실의 사물들을 객체로 보고 그 객체로부터 프로그래밍 하는 기법
- 코드의 재사용성이 높음
- 객체 단위로 코드가 작성되기 때문에 디버깅이 쉽고 유지보수에 용이

- 단점
  1. 객체 간의 정보 교환이 메시지 교환을 통해 일어나므로 실행 시스템에 많은 오버헤드 발생
        -> 하드웨어의 발전으로 보완
  2. 객체가 상태를 가져서 변수가 존재하기 때문에 버그 발생 -> 함수형 패러다임이 등장

- 특징
  1. 추상화 : 공통의 속성이나 기능을 묶어 이름을 붙이는 것 ex. 클래스를 정의하는 것
  2. 캡슐화 : 서로 관련있는 기능이나 데이터를 하나로 묶어서 실제 구현되는 부분을 외부에 드러나지 않도록 캡슐로 감싸고 함수를 통해서만 데이터에 접근하게끔 하는 것
  3. 다형성 : 하나의 기능을 수행하지만 형태를 다양하게 가지는 기법으로 오버라이딩과 오버로딩 두가지가 존재.
        ㄴ 오버라이딩 : 상위 클래스의 메소드를 하위 클래스에서 같은 이름으로 재정의해서 사용하는 것
        ㄴ 오버로딩 : 같은 메소드의 이름을 가진 매개변수가 다른 메소드가 여러가 존재 가능
  4. 상속성 : 상위 클래스의 특징을 하위 클래스가 물려받는 것으로 변수나 메소드를 재활용 가능
  
 - 객체 지향적 설계 원칙
  1. 단일 책임 원칙
    클래스는 하나의 책임을 가져야 하며 클래스를 변경하는 이유는 단 하나의 이유여야 한다.
  2. 개방 - 폐쇠 원칙
    확장에는 열려 있어야 하고 변경에는 닫혀 있어야 한다.
  3. 리스코프 치환 원칙
    상위 타입의 객체를 하위 타입의 객체로 치환해도 상위 타입을 사용하는 프로그램은 정상적으로 동작해야 한다.
  4. 인터페이스 분리 원칙
     인터페이스는 그 인터페이스를 사용하는 클라이언트를 기준으로 분리해야 한다.
  5. 의존 역전 원칙
    고수준 모듈은 저수준 모듈에 의존하면 안된다.
